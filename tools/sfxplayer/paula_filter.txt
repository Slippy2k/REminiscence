The filter is a 12 dB/oct Butterworth low-pass filter at approximately 3.3 kHz

For a filter that has an nth number order, it will have a subsequent roll-off rate of 20n dB/decade or 6n dB/octave. So a first-order filter has a roll-off rate of 20dB/decade (6dB/octave), a second-order filter has a roll-off rate of 40dB/decade (12dB/octave), and a fourth-order filter has a roll-off rate of 80dB/decade (24dB/octave), etc, etc.

http://www-users.cs.york.ac.uk/%7Efisher/mkfilter/trad.html

 You specified the following parameters:

    filtertype 	= 	Butterworth
    passtype 	= 	Lowpass
    ripple 	= 	
    order 	= 	2
    samplerate 	= 	22050
    corner1 	= 	3300
    corner2 	= 	
    adzero 	= 	
    logmin 	= 	

Results

Command line: /www/usr/fisher/helpers/mkfilter -Bu -Lp -o 2 -a 1.4965986395e-01 0.0000000000e+00
raw alpha1    =   0.1496598639
raw alpha2    =   0.1496598639
warped alpha1 =   0.1617587799
warped alpha2 =   0.1617587799
gain at dc    :   mag = 7.655158005e+00   phase =   0.0000000000 pi
gain at centre:   mag = 5.413014137e+00   phase =  -0.5000000000 pi
gain at hf    :   mag = 0.000000000e+00

S-plane zeros:

S-plane poles:
	 -0.7186753235 + j   0.7186753235
	 -0.7186753235 + j  -0.7186753235

Z-plane zeros:
	 -1.0000000000 + j   0.0000000000	2 times

Z-plane poles:
	  0.3752058639 + j   0.3635323831
	  0.3752058639 + j  -0.3635323831

Recurrence relation:
y[n] = (  1 * x[n- 2])
     + (  2 * x[n- 1])
     + (  1 * x[n- 0])

     + ( -0.2729352339 * y[n- 2])
     + (  0.7504117278 * y[n- 1])

Ansi ``C'' Code

/* Digital filter designed by mkfilter/mkshape/gencode   A.J. Fisher
   Command line: /www/usr/fisher/helpers/mkfilter -Bu -Lp -o 2 -a 1.4965986395e-01 0.0000000000e+00 -l */

#define NZEROS 2
#define NPOLES 2
#define GAIN   7.655158005e+00

static float xv[NZEROS+1], yv[NPOLES+1];

static void filterloop()
  { for (;;)
      { xv[0] = xv[1]; xv[1] = xv[2]; 
        xv[2] = next input value / GAIN;
        yv[0] = yv[1]; yv[1] = yv[2]; 
        yv[2] =   (xv[0] + xv[2]) + 2 * xv[1]
                     + ( -0.2729352339 * yv[0]) + (  0.7504117278 * yv[1]);
        next output value = yv[2];
      }
  }

